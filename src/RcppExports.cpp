// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// kernel_DLR_fast
NumericVector kernel_DLR_fast(const List& pCDFlist, const NumericVector& sorted_pv, const bool adaptive, const double alpha, const bool stepUp, const double zeta, const NumericVector& support, const Nullable<IntegerVector>& pCDFcounts);
RcppExport SEXP _FDX_kernel_DLR_fast(SEXP pCDFlistSEXP, SEXP sorted_pvSEXP, SEXP adaptiveSEXP, SEXP alphaSEXP, SEXP stepUpSEXP, SEXP zetaSEXP, SEXP supportSEXP, SEXP pCDFcountsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type pCDFlist(pCDFlistSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sorted_pv(sorted_pvSEXP);
    Rcpp::traits::input_parameter< const bool >::type adaptive(adaptiveSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const bool >::type stepUp(stepUpSEXP);
    Rcpp::traits::input_parameter< const double >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type support(supportSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector>& >::type pCDFcounts(pCDFcountsSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_DLR_fast(pCDFlist, sorted_pv, adaptive, alpha, stepUp, zeta, support, pCDFcounts));
    return rcpp_result_gen;
END_RCPP
}
// kernel_DLR_crit
List kernel_DLR_crit(const List& pCDFlist, const NumericVector& support, const NumericVector& sorted_pv, const bool adaptive, const double alpha, const double zeta, const bool stepUp, const Nullable<IntegerVector>& pCDFcounts);
RcppExport SEXP _FDX_kernel_DLR_crit(SEXP pCDFlistSEXP, SEXP supportSEXP, SEXP sorted_pvSEXP, SEXP adaptiveSEXP, SEXP alphaSEXP, SEXP zetaSEXP, SEXP stepUpSEXP, SEXP pCDFcountsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type pCDFlist(pCDFlistSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type support(supportSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sorted_pv(sorted_pvSEXP);
    Rcpp::traits::input_parameter< const bool >::type adaptive(adaptiveSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const bool >::type stepUp(stepUpSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector>& >::type pCDFcounts(pCDFcountsSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_DLR_crit(pCDFlist, support, sorted_pv, adaptive, alpha, zeta, stepUp, pCDFcounts));
    return rcpp_result_gen;
END_RCPP
}
// kernel_wLR_fast
NumericVector kernel_wLR_fast(const NumericVector& sorted_w_pv, const NumericVector& weights, double alpha, bool geom_weighting);
RcppExport SEXP _FDX_kernel_wLR_fast(SEXP sorted_w_pvSEXP, SEXP weightsSEXP, SEXP alphaSEXP, SEXP geom_weightingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type sorted_w_pv(sorted_w_pvSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type geom_weighting(geom_weightingSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_wLR_fast(sorted_w_pv, weights, alpha, geom_weighting));
    return rcpp_result_gen;
END_RCPP
}
// kernel_DGR_fast
List kernel_DGR_fast(const List& pCDFlist, const NumericVector& sorted_pv, const bool adaptive, const double alpha, const Nullable<IntegerVector>& pCDFcounts);
RcppExport SEXP _FDX_kernel_DGR_fast(SEXP pCDFlistSEXP, SEXP sorted_pvSEXP, SEXP adaptiveSEXP, SEXP alphaSEXP, SEXP pCDFcountsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type pCDFlist(pCDFlistSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sorted_pv(sorted_pvSEXP);
    Rcpp::traits::input_parameter< const bool >::type adaptive(adaptiveSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector>& >::type pCDFcounts(pCDFcountsSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_DGR_fast(pCDFlist, sorted_pv, adaptive, alpha, pCDFcounts));
    return rcpp_result_gen;
END_RCPP
}
// kernel_DGR_crit
List kernel_DGR_crit(const List& pCDFlist, const NumericVector& support, const NumericVector& sorted_pv, const bool adaptive, const double alpha, const double zeta, const Nullable<IntegerVector>& pCDFcounts);
RcppExport SEXP _FDX_kernel_DGR_crit(SEXP pCDFlistSEXP, SEXP supportSEXP, SEXP sorted_pvSEXP, SEXP adaptiveSEXP, SEXP alphaSEXP, SEXP zetaSEXP, SEXP pCDFcountsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type pCDFlist(pCDFlistSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type support(supportSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sorted_pv(sorted_pvSEXP);
    Rcpp::traits::input_parameter< const bool >::type adaptive(adaptiveSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector>& >::type pCDFcounts(pCDFcountsSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_DGR_crit(pCDFlist, support, sorted_pv, adaptive, alpha, zeta, pCDFcounts));
    return rcpp_result_gen;
END_RCPP
}
// kernel_wGR_fast
NumericVector kernel_wGR_fast(const NumericVector& sorted_w_pv, const NumericVector& weights, double alpha, bool geom_weighting);
RcppExport SEXP _FDX_kernel_wGR_fast(SEXP sorted_w_pvSEXP, SEXP weightsSEXP, SEXP alphaSEXP, SEXP geom_weightingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type sorted_w_pv(sorted_w_pvSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type geom_weighting(geom_weightingSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_wGR_fast(sorted_w_pv, weights, alpha, geom_weighting));
    return rcpp_result_gen;
END_RCPP
}
// kernel_DPB_fast
NumericVector kernel_DPB_fast(const List& pCDFlist, const NumericVector& sorted_pv, const bool adaptive, const double alpha, const bool exact, const Nullable<IntegerVector>& pCDFcounts);
RcppExport SEXP _FDX_kernel_DPB_fast(SEXP pCDFlistSEXP, SEXP sorted_pvSEXP, SEXP adaptiveSEXP, SEXP alphaSEXP, SEXP exactSEXP, SEXP pCDFcountsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type pCDFlist(pCDFlistSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sorted_pv(sorted_pvSEXP);
    Rcpp::traits::input_parameter< const bool >::type adaptive(adaptiveSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const bool >::type exact(exactSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector>& >::type pCDFcounts(pCDFcountsSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_DPB_fast(pCDFlist, sorted_pv, adaptive, alpha, exact, pCDFcounts));
    return rcpp_result_gen;
END_RCPP
}
// kernel_DPB_crit
List kernel_DPB_crit(const List& pCDFlist, const NumericVector& support, const NumericVector& sorted_pv, const bool adaptive, const double alpha, const double zeta, const bool exact, const Nullable<IntegerVector>& pCDFcounts);
RcppExport SEXP _FDX_kernel_DPB_crit(SEXP pCDFlistSEXP, SEXP supportSEXP, SEXP sorted_pvSEXP, SEXP adaptiveSEXP, SEXP alphaSEXP, SEXP zetaSEXP, SEXP exactSEXP, SEXP pCDFcountsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type pCDFlist(pCDFlistSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type support(supportSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sorted_pv(sorted_pvSEXP);
    Rcpp::traits::input_parameter< const bool >::type adaptive(adaptiveSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const bool >::type exact(exactSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector>& >::type pCDFcounts(pCDFcountsSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_DPB_crit(pCDFlist, support, sorted_pv, adaptive, alpha, zeta, exact, pCDFcounts));
    return rcpp_result_gen;
END_RCPP
}
// kernel_wPB_fast
NumericVector kernel_wPB_fast(const NumericVector& sorted_w_pv, const NumericVector& weights, double alpha, bool geom_weighting, bool exact);
RcppExport SEXP _FDX_kernel_wPB_fast(SEXP sorted_w_pvSEXP, SEXP weightsSEXP, SEXP alphaSEXP, SEXP geom_weightingSEXP, SEXP exactSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type sorted_w_pv(sorted_w_pvSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type geom_weighting(geom_weightingSEXP);
    Rcpp::traits::input_parameter< bool >::type exact(exactSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_wPB_fast(sorted_w_pv, weights, alpha, geom_weighting, exact));
    return rcpp_result_gen;
END_RCPP
}
// geom_weight
NumericVector geom_weight(const NumericVector& pvalues, const NumericVector& weights);
RcppExport SEXP _FDX_geom_weight(SEXP pvaluesSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type pvalues(pvaluesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(geom_weight(pvalues, weights));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FDX_kernel_DLR_fast", (DL_FUNC) &_FDX_kernel_DLR_fast, 8},
    {"_FDX_kernel_DLR_crit", (DL_FUNC) &_FDX_kernel_DLR_crit, 8},
    {"_FDX_kernel_wLR_fast", (DL_FUNC) &_FDX_kernel_wLR_fast, 4},
    {"_FDX_kernel_DGR_fast", (DL_FUNC) &_FDX_kernel_DGR_fast, 5},
    {"_FDX_kernel_DGR_crit", (DL_FUNC) &_FDX_kernel_DGR_crit, 7},
    {"_FDX_kernel_wGR_fast", (DL_FUNC) &_FDX_kernel_wGR_fast, 4},
    {"_FDX_kernel_DPB_fast", (DL_FUNC) &_FDX_kernel_DPB_fast, 6},
    {"_FDX_kernel_DPB_crit", (DL_FUNC) &_FDX_kernel_DPB_crit, 8},
    {"_FDX_kernel_wPB_fast", (DL_FUNC) &_FDX_kernel_wPB_fast, 5},
    {"_FDX_geom_weight", (DL_FUNC) &_FDX_geom_weight, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_FDX(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
